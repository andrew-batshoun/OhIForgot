/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.14.v20181114
 * Generated at: 2022-11-16 20:49:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tasksPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/tags/footer.tag", Long.valueOf(1668629006405L));
    _jspx_dependants.put("/WEB-INF/tags/navbar.tag", Long.valueOf(1668631314624L));
    _jspx_dependants.put("/WEB-INF/tags/head.tag", Long.valueOf(1668101428643L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      if (_jspx_meth_tag_005fhead_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>Task list</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body ng-app=\"taskApp\" class=\"ng-cloak\">\r\n");
      out.write("\r\n");
      out.write("\t");
      if (_jspx_meth_tag_005fnavbar_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container\" ng-controller=\"TasksController as ctrl\" style=\"margin: 1em\">\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"panel panel-default\">\r\n");
      out.write("\t\t\t<div class=\"panel-Heading\">\r\n");
      out.write("\t\t\t\t<span class=\"lead\">List of Tasks</span>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"tablecontainer\">\r\n");
      out.write("\t\t\t\t<table class=\"table table-hover\">\r\n");
      out.write("\t\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>Task #</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>Task Description</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>DueDate</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>Completed</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th width=\"20%\"></th>\r\n");
      out.write("\t\t\t\t\t\t\t<th></th>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t<tr ng-repeat=\"currentTask in ctrl.tasks\">\r\n");
      out.write("\t\t\t\t\t\t\t<td><span ng-bind=\"currentTask.id\"></span></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td><span ng-bind=\"currentTask.description\"></span></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td><span ng-bind=\"currentTask.dueDate\"></span></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"checkbox\" ng-change=\"showRemove()\"\r\n");
      out.write("\t\t\t\t\t\t\t\tng-model=\"checkSelected\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<div ng-show=\"checkSelected\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<button type=\"button\" ng-click=\"ctrl.remove(currentTask.id)\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-danger custom-width\">Remove</button>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<button type=\"button\" ng-click=\"ctrl.edit(currentTask.id)\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-success custom-width\">Edit</button>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<input class=\"btn btn-primary\"\r\n");
      out.write("\t\t\t\tvalue=\"{{!ctrl.task.id ? 'New Task' : 'Update Task'}}\" type=\"button\"\r\n");
      out.write("\t\t\t\tdata-bs-toggle=\"collapse\" data-bs-target=\"#collapseCreateTask\"\r\n");
      out.write("\t\t\t\taria-expanded=\"false\" aria-controls=\"collapseCreateTask\">\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"collapse\" id=\"collapseCreateTask\">\r\n");
      out.write("\t\t\t<div class=\"card card-body\">\r\n");
      out.write("\t\t\t\t<div class=\"panel panel-default\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"formcontainer\">\r\n");
      out.write("\t\t\t\t\t\t<form ng-submit=\"ctrl.submit()\" name=\"taskForm\"\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"form-horizontal\">\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"hidden\" ng-model=\"ctrl.task.id\" />\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<label class=\"col-md-2 control-lable\" for=\"description\">Description</label>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-7\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<input type=\"text\" ng-model=\"ctrl.task.description\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tid=\"description\" class=\" form-control input-sm\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter a task description\" required\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t />\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<label class=\"col-md-2 control-lable\" for=\"date\">Due\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tDate</label>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-7\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<input type=\"text\" ng-model=\"ctrl.task.dueDate\" id=\"date\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tclass=\"form-control input-sm\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter a due date. \" />\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-actions floatRight\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"submit\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue=\"{{!ctrl.task.id ? 'Add' : 'Update'}}\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-primary btn-sm\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<button type=\"button\" ng-click=\"ctrl.reset()\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-warning btn-sm\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tng-disabled=\"taskForm.$pristine\">Reset</button>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");
      if (_jspx_meth_tag_005ffooter_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_tag_005fhead_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  tag:head
    org.apache.jsp.tag.web.head_tag _jspx_th_tag_005fhead_005f0 = new org.apache.jsp.tag.web.head_tag();
    _jsp_getInstanceManager().newInstance(_jspx_th_tag_005fhead_005f0);
    try {
      _jspx_th_tag_005fhead_005f0.setJspContext(_jspx_page_context);
      _jspx_th_tag_005fhead_005f0.doTag();
    } finally {
      _jsp_getInstanceManager().destroyInstance(_jspx_th_tag_005fhead_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_tag_005fnavbar_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  tag:navbar
    org.apache.jsp.tag.web.navbar_tag _jspx_th_tag_005fnavbar_005f0 = new org.apache.jsp.tag.web.navbar_tag();
    _jsp_getInstanceManager().newInstance(_jspx_th_tag_005fnavbar_005f0);
    try {
      _jspx_th_tag_005fnavbar_005f0.setJspContext(_jspx_page_context);
      _jspx_th_tag_005fnavbar_005f0.doTag();
    } finally {
      _jsp_getInstanceManager().destroyInstance(_jspx_th_tag_005fnavbar_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_tag_005ffooter_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  tag:footer
    org.apache.jsp.tag.web.footer_tag _jspx_th_tag_005ffooter_005f0 = new org.apache.jsp.tag.web.footer_tag();
    _jsp_getInstanceManager().newInstance(_jspx_th_tag_005ffooter_005f0);
    try {
      _jspx_th_tag_005ffooter_005f0.setJspContext(_jspx_page_context);
      _jspx_th_tag_005ffooter_005f0.doTag();
    } finally {
      _jsp_getInstanceManager().destroyInstance(_jspx_th_tag_005ffooter_005f0);
    }
    return false;
  }
}
